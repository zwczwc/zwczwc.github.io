<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/06/05/hello-world/"/>
    <url>/2021/06/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Android平台下的播放器框架资料收藏</title>
    <link href="/2018/09/13/Android%E5%B9%B3%E5%8F%B0%E4%B8%8B%E7%9A%84%E6%92%AD%E6%94%BE%E5%99%A8%E6%A1%86%E6%9E%B6%E8%B5%84%E6%96%99%E6%94%B6%E8%97%8F/"/>
    <url>/2018/09/13/Android%E5%B9%B3%E5%8F%B0%E4%B8%8B%E7%9A%84%E6%92%AD%E6%94%BE%E5%99%A8%E6%A1%86%E6%9E%B6%E8%B5%84%E6%96%99%E6%94%B6%E8%97%8F/</url>
    
    <content type="html"><![CDATA[<p>实习时做短视频优化查到比较多关于Android平台下的播放器框架资料，先把链接贴上来，迟点再整理。（懒= =）</p><h2 id="Andorid视频播放"><a href="#Andorid视频播放" class="headerlink" title="Andorid视频播放"></a>Andorid视频播放</h2><p><a href="https://blog.csdn.net/pangpang123654/article/details/78125038">硬解码与软解码的选择</a></p><p><a href="https://blog.csdn.net/Guofengpu/article/details/51544454">MediaCodec介绍</a></p><p><a href="https://blog.csdn.net/hejjunlin/article/details/53729575">MediaCodec，讲得好</a></p><p><a href="http://www.cnblogs.com/roger-yu/p/5635494.html">MediaCodec中文文档</a></p><p><a href="http://sparkgis.com/2018/07/10/android-mediaplayer-%E5%92%8C-mediacodec-%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB%EF%BC%88%E4%B8%80%EF%BC%89/">Android MediaPlayer 和 MediaCodec 的区别和联系</a></p><h2 id="Exoplayer"><a href="#Exoplayer" class="headerlink" title="Exoplayer"></a>Exoplayer</h2><p><a href="https://github.com/google/ExoPlayer">官网</a></p><p><a href="https://google.github.io/ExoPlayer/">官方指南</a></p><p><a href="http://google.github.io/ExoPlayer/doc/reference/">官方类参考</a></p><h2 id="ExoPlayer播放器对比"><a href="#ExoPlayer播放器对比" class="headerlink" title="ExoPlayer播放器对比"></a>ExoPlayer播放器对比</h2><p><a href="https://academy.realm.io/posts/360andev-effie-barak-switching-exoplayer-better-video-android/">官方介绍</a></p><p><a href="https://juejin.im/post/5a9f5726f265da239f06e874">掘金的主流播放器对比</a></p><p><a href="https://blog.csdn.net/pangpang123654/article/details/78256361">ExoPlayer VS IjkPlayer</a></p><p><a href="https://www.jianshu.com/p/74dbee4e0148">android平台视频框架小调研</a></p><h2 id="Exoplayer使用"><a href="#Exoplayer使用" class="headerlink" title="Exoplayer使用"></a>Exoplayer使用</h2><p><a href="https://qiita.com/niusounds/items/cce4ff69f5911908259b#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%ABexoplayer%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B">岛国码农介绍</a></p><p><a href="https://codelabs.developers.google.com/codelabs/exoplayer-intro/#4">谷歌CodeLabs</a></p><h2 id="Exoplayer过程分析"><a href="#Exoplayer过程分析" class="headerlink" title="Exoplayer过程分析"></a>Exoplayer过程分析</h2><p><a href="http://yummylau.com/2018/06/01/%E5%A4%9A%E5%AA%92%E4%BD%93_2018-06-01_ExoPlayer%E7%B3%BB%E5%88%97%E4%B8%80%E4%B9%8B%E5%A4%9A%E5%AA%92%E4%BD%93%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/">多媒体加载</a></p><p><a href="http://yummylau.com/2018/06/02/%E5%A4%9A%E5%AA%92%E4%BD%93_2018-06-02_ExoPlayer%E7%B3%BB%E5%88%97%E4%BA%8C%E4%B9%8B%E5%B8%A6%E5%AE%BD%E9%A2%84%E6%B5%8B/">带宽预测</a></p><h2 id="Exoplayer缓存Cache"><a href="#Exoplayer缓存Cache" class="headerlink" title="Exoplayer缓存Cache"></a>Exoplayer缓存Cache</h2><p><a href="https://blog.csdn.net/john_chedan/article/details/80692483">缓存实现</a></p><p><a href="https://www.programcreek.com/java-api-examples/index.php?api=com.google.android.exoplayer2.upstream.cache.LeastRecentlyUsedCacheEvictor">缓存大小设置</a></p><p><a href="https://stackoverflow.com/questions/42073937/exoplayer-generalize-simplecache-behaviour">时效性变化的url处理</a></p><h2 id="Exoplayer源码修改"><a href="#Exoplayer源码修改" class="headerlink" title="Exoplayer源码修改"></a>Exoplayer源码修改</h2><p><a href="https://blog.csdn.net/u010302327/article/details/79788705">https://blog.csdn.net/u010302327/article/details/79788705</a></p><h2 id="IJKplayer"><a href="#IJKplayer" class="headerlink" title="IJKplayer"></a>IJKplayer</h2><p><a href="https://github.com/Bilibili/ijkplayer">官网</a></p><p><a href="https://www.jianshu.com/p/55fbfd5b564a">小结</a></p><p><a href="https://www.jianshu.com/p/220b00d00deb">问题集锦</a></p><h2 id="IJKplayer编译"><a href="#IJKplayer编译" class="headerlink" title="IJKplayer编译"></a>IJKplayer编译</h2><p><a href="https://www.jianshu.com/p/bd289e25d272">编译so支持HTTPS</a></p><p><a href="https://www.jianshu.com/p/2c1413486b01">编译so1</a></p><p><a href="https://blog.csdn.net/zy987654zy/article/details/53126457">编译so2</a></p><h2 id="IJKplayer关于卡顿的Github-Issue"><a href="#IJKplayer关于卡顿的Github-Issue" class="headerlink" title="IJKplayer关于卡顿的Github Issue"></a>IJKplayer关于卡顿的Github Issue</h2><p><a href="https://github.com/Bilibili/ijkplayer/issues/3179">https://github.com/Bilibili/ijkplayer/issues/3179</a></p><p><a href="https://github.com/Bilibili/ijkplayer/issues/3048">https://github.com/Bilibili/ijkplayer/issues/3048</a></p><p><a href="https://github.com/Bilibili/ijkplayer/issues/4094">https://github.com/Bilibili/ijkplayer/issues/4094</a></p><p><a href="https://github.com/Bilibili/ijkplayer/issues/4319">https://github.com/Bilibili/ijkplayer/issues/4319</a></p><p><a href="https://github.com/Bilibili/ijkplayer/issues/3493">https://github.com/Bilibili/ijkplayer/issues/3493</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>利用DNS隧道免认证上网</title>
    <link href="/2018/07/10/%E5%88%A9%E7%94%A8DNS%E9%9A%A7%E9%81%93%E5%85%8D%E8%AE%A4%E8%AF%81%E4%B8%8A%E7%BD%91/"/>
    <url>/2018/07/10/%E5%88%A9%E7%94%A8DNS%E9%9A%A7%E9%81%93%E5%85%8D%E8%AE%A4%E8%AF%81%E4%B8%8A%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<p>现在很多商场、饭店的商业WIFI采用了WEB Portal认证方式，但有些认证系统存在漏洞，可以利用 DNS 隧道绕过网关计费系统，实现上网。</p><h2 id="DNS运行机制"><a href="#DNS运行机制" class="headerlink" title="DNS运行机制"></a>DNS运行机制</h2><p>DNS(Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，用于TCP/IP网络，提供将主机名和域名转换为IP地址的服务，举例就是把<code>www.qq.com</code>转换为IPV4地址119.147.15.13</p><p>DNS解析域名过程如下叙述：</p><ol><li>找浏览器缓存，当用户通过浏览器访问某域名时，浏览器首先会在自己的缓存中查找是否有该域名对应的IP地址（若曾经访问过该域名且没有清空缓存便存在）。</li><li>找系统缓存，当浏览器缓存中无域名对应IP则会自动检查用户计算机系统Hosts文件DNS缓存是否有该域名对应IP。</li><li>找路由器缓存，当浏览器及系统缓存中均无域名对应IP则进入路由器缓存中检查，以上三步均为客服端的DNS缓存。</li><li>找ISP的DNS缓存，当在用户客服端查找不到域名对应IP地址，则将进入ISP DNS缓存中进行查询。比如你用的是电信的网络，则会进入电信的DNS缓存服务器中进行查找。</li><li>查询根域名服务器，当以上均未完成，则进入根服务器进行查询。全球仅有13台根域名服务器，1个主根域名服务器，其余12为辅根域名服务器。根域名收到请求后会查看区域文件记录，若无则将其管辖范围内顶级域名（如.com）服务器IP告诉本地DNS服务器。</li><li>查询顶级域名服务器，顶级域名服务器收到请求后查看区域文件记录，若无则将其管辖范围内主域名服务器的IP地址告诉本地DNS服务器。</li><li>查询主域名服务器，主域名服务器接受到请求后查询自己的缓存，如果没有则进入下一级域名服务器进行查找，并重复该步骤直至找到正确纪录。</li><li>保存结果到缓存，本地域名服务器把返回的结果保存到缓存，以备下一次使用，同时将该结果反馈给客户端，客户端通过这个IP地址与web服务器建立链接。</li></ol><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809070144_414.png"></p><h2 id="DNS隧道原理"><a href="#DNS隧道原理" class="headerlink" title="DNS隧道原理"></a>DNS隧道原理</h2><p>DNS隧道从名字上来看就是利用DNS查询过程建立起隧道，传输数据。概括地讲，所谓 tunnel 就是把下一层（比如IPv4层）的包封装到上一层（比如 SSH，HTTP）或者同一层（比如IPv6层）的协议中进行传输，从而实现网络之间的穿透。</p><p>很明显，这种实现有个前提，那就是：发送端和接收端必须各有一个解析这种包的程序或者内核模块才能实现正常通信。DNS隧道技术简单来说就是将网络流量封装成DNS流量,再通过DNS的正常走向将流量传出来.这里的流量封装通常由一个客户端来完成,而降封装的DNS流量还原成正常的流量将由一个服务端来完成。 </p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809070146_947.png"></p><p>下面是利用DNS隧道连接外部网络时DNS解析的一个过程，由于防火墙并没有对dns协议做任何处理，所以我们可以通过这种方式向外网发送数据来穿透防火墙。</p><ol><li>向内部dns服务器发送一个查询xxx.com的请求，这个域名的控制权限是在自己手里的</li><li>内部dns服务器通过防火墙向根dns服务器发出查询请求</li><li>经过大量重定向后，DNS请求到达xxx.com的权威DNS服务器，该服务器处于自己的控制之下</li><li>请求查询的响应结果通过防火墙</li><li>响应结果返回到内部服务器</li><li>内部服务器将响应结果返回</li></ol><h2 id="Web-Portal的原理"><a href="#Web-Portal的原理" class="headerlink" title="Web Portal的原理"></a>Web Portal的原理</h2><p>Portal在英语中是入口的意思。Portal认证通常也称为Web认证，一般将Portal认证网站称为门户网站。未认证用户上网时，设备强制用户登录到特定站点，用户可以免费访问其中的服务。当用户需要使用互联网中的其它信息时，必须在门户网站进行认证，只有认证通过后才可以使用互联网资源。Portal业务可以为运营商提供方便的管理功能，门户网站可以开展广告、社区服务、个性化的业务等，使宽带运营商、设备提供商和内容服务提供商形成一个产业生态系统。</p><p>Portal的典型组网方式如下面拓扑图所示，它由五个基本要素组成：认证客户端、接入设备、Portal服务器、认证/计费服务器和安全策略服务器。</p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809100034_799.png"></p><p>Portal认证的基本过程如下：</p><ol><li><p>客户机首先通过DHCP协议获取到IP地址（也可以使用静态IP地址），但是客户使用获取到的IP地址并不能登上Internet，在认证通过前只能访问特定的IP地址，这个地址通常是PORTAL服务器的IP地址。采用Portal认证的接入设备必须具备这个能力。一般通过修改接入设备的访问控制表（ACL）可以做到。</p></li><li><p>用户登录到Portal Server后，可以浏览上面的内容，比如广告、新闻等免费信息，同时用户还可以在网页上输入用户名和密码，它们会被WEB客户端应用程序传给 Portal Server，再由Portal Server与NAS之间交互来实现用户的认证。</p></li><li><p>Portal Server在获得用户的用户名和密码外，还会得到用户的IP地址，以它为索引来标识用户。然后Portal Server 与NAS之间用Portal协议直接通信，而NAS又与RADIUS 服务器直接通信完成用户的认证和上线过程。因为安全问题，通常支持安全性较强的CHAP式认证。</p></li></ol><h2 id="设备及环境软件"><a href="#设备及环境软件" class="headerlink" title="设备及环境软件"></a>设备及环境软件</h2><table><thead><tr><th>设备</th><th align="center">环境软件</th></tr></thead><tbody><tr><td>本地主机</td><td align="center">Windows10，iodine0.7，ShadowSocks代理，OpenVpn2.3.10，XShell6</td></tr><tr><td>腾讯云主机</td><td align="center">CentOS，OpenVpn，ShadowSocks代理，iodined</td></tr><tr><td>阿里云域名</td><td align="center">域名解析设置</td></tr></tbody></table><h2 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h2><p>一般情况下，连接上路由器后，不经过其它操作直接输入别的网址打开，主机的数据包将从TCP端口发出，这时路由器网关发现主机没有经过Portal认证，立刻就拦截这个端口发出的数据包，其它端口同理也拦截，最后重定向至认证页面要求用户进行认证。</p><p>然而，世间万事都有例外。即使在不经过Portal认证的情况下，UDP的53端口发出的数据包也不会被网关拦截，而在这个端口上运行的就是DNS协议，DNS的解析功能依然正常，因此设法利用这个端口，在本地将上网的数据包伪装成DNS数据包，本地DNS自然无法解析这个伪装的DNS数据包，利用域名解析解析到远程的自己搭建的服务器上，在远程服务器上再还原出真实的上网数据包完成各种上网请求，最后整理响应数据伪装成DNS响应数据包，返回主机上还原查看上网响应数据包。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="域名解析配置"><a href="#域名解析配置" class="headerlink" title="域名解析配置"></a>域名解析配置</h3><p>在阿里云上申请了一个.top域名，进入到域名控制台中，点击“解析”进入到解析配置，为域名添加一条A记录和一条NS记录，详情如下图所示。 </p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809100045_296.png"></p><p>其中A记录用来指定主机名或域名对应的IP地址记录，NS记录是域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析。当本地域名服务器无法解析伪装的数据包后，便将数据包发送给NS记录指定的服务器aaa.coolcc.top，而aaa.coolcc.top的IP地址已经在A记录中给出了。</p><p>因此，这样配置后本地域名服务器会将伪装的DNS数据包发送到云主机上。</p><h3 id="云主机配置"><a href="#云主机配置" class="headerlink" title="云主机配置"></a>云主机配置</h3><p>在腾讯云上购买了体验云主机，配置为1 核 1 GB 1 Mbps，预装系统为CentOS 7.4 64位，可在控制台中查看到当前云主机概况，如下图所示。 </p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809100046_861.png"></p><p>在控制台菜单中进入到<code>安全组</code>选项，新建安全组，设置为<code>放通所有端口</code>，便于DNS数据在UDP53端口的接收传送。回到云主机概况中，点此云主机的<code>更多</code>，进入到<code>配置安全组选项</code>，将此安全组配置给云主机。 </p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809100046_590.png"></p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809100047_613.png"></p><p>使用XShell连接云主机，新建会话，在主机一栏中填入云主机的公网IP，随后弹出登录验证界面，输入用户账号密码后即可登录使用管理云主机。</p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809100047_753.png"></p><p>登录云主机成功后就可以开始配置主机环境，安装DNS隧道所需软件，输入以下安装指令并依照提示安装即可</p><table><thead><tr><th><strong>软件</strong></th><th>安装指令</th><th>作用</th></tr></thead><tbody><tr><td>iodined</td><td>yum install iodine</td><td>建立DNS隧道</td></tr><tr><td>OpenVpn</td><td>yum install openvpn</td><td>虚拟网卡</td></tr><tr><td>ShadowSocks</td><td>yum install python-setuptools ; easy_install pip</td><td>系统代理</td></tr></tbody></table><p>安装完软件后需要配置软件，对于ShadowSocks，配置其代理设置，输入<code>vim /etc/shadowsocks.json</code>指令来创建配置文件，内容如下图，其中服务器地址填写的地址需要与云主机内网IP在同一个网段下，保存退出。随后输入<code>ssserver -c /etc/shadowsocks.json -d start</code>指令，表明用配置文件启动运行ShadowSocks服务。最后输入<code>iodined -c -f -P 12345678 172.16.99.1 zwc.coolcc.top</code>指令启动iodine，监听zwc.coolcc.top的DNS解析。 </p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809100050_783.png"></p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809100050_573.png"></p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809100050_155.png"></p><p>另外，可以上<a href="https://code.kryo.se/iodine/check-it/">https://code.kryo.se/iodine/check-it/</a>这个网站输入监听解析域名，上面例子就是zwc.coolcc.top，验证iodine工作是否正常。如下图，返回结果提示iodine工作没问题。 </p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809100051_492.png"></p><h3 id="本地主机配置"><a href="#本地主机配置" class="headerlink" title="本地主机配置"></a>本地主机配置</h3><p>本地主机同样先安装好所需环境和软件，安装包都能在对应官网上找到下载，这里也不赘述详细安装过程了。注意的问题一是OpenVpn最好用2.3.10版本，因为一开始用2.3.13版本网络无法连通，换成2.3.10之后就好了，二是安装OpenVpn时只需要勾选安装T<code>AP Virtual Ethernet Adapter</code>一项即可，因为只需要用到OpenVpn生成的这个TAP网络适配器来沟通连接服务器的网卡。</p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809100051_678.png"></p><p>安装完后启动iodine服务。以管理管身份运行cmd，在cmd中进入到iodine的32位或者64位目录下，输入<code>iodine -f -P 12345678 203.195.135.206 zwc.coolcc.top</code>指令启动iodine，与云主机建立DNS隧道，注意到输入参数为云主机的公网IP，12345678为云主机端的iodine程序设置的密码。成功建立后可以窗口如下图所示。</p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809100051_293.png"></p><p>可以另开一个cmd测试一下此时本地主机与云主机的连通性，ping一下云主机之前设置的DNS服务器地址，效果如下图所示。</p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809100052_372.png"></p><p>现在要启用ShadowSocks代理，选项按照云主机的配置文件填写就可以了，如下图编辑服务器界面。最后右击任务栏ShadowSocks小图标，正式启用ShadowSocks系统代理，并把代理模式改成全局代理模式。 </p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809100052_670.png"></p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>去学校隔壁的麦当劳，连接上麦当劳的wifi，理所当然地弹出了Web的Portal认证页面</p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809100053_881.png"></p><p>无视麦当劳的认证界面，打开浏览器别的选项卡输入网址浏览，发现网页都能打开，说明我们的实验成功了。在百度搜索中输入IP，显示的IP为云主机的公网IP地址，属于腾讯云，说明我们的代理设置也成功了。但是在这种上网情况下，QQ微信等即时通讯软件是无法使用的，因为数据不走DNS解析通道，这也能解释有时候网页打不开但是QQ能上的现象，就是因为DNS解析的问题。</p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809100053_841.png"></p><p>现在测试一下采用这种方式的上网通信质量，打开老牌的网络测速网站SpeedTest，任选一个测速点测试本地主机与测速点的通信质量。在测速报告中可以看到下载上传速度都在1Mbps左右，网络质量不太好，打开网页和加载网络图片也感到明显卡顿，延迟高 </p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809100053_735.png"></p><p>网络质量不好的原因在于三方面，一是我们购置的云主机为最低配，网络带宽配置仅有1Mbps，从这么低的带宽自然无法得到良好的上网体验；二是网络的多重处理转发性，经历了本地主机软件的伪造DNS数据包处理，内部DNS服务器的转发，远程主机的接收还原这么多步骤后，才开始通过远程主机与互联网的连接真正处理网络请求数据，接收到响应数据之后还要重新逆执行前面的步骤，这样复杂的转发机制无疑加大的延迟，降低网络质量；三是UDP协议的不可靠性，虽然快捷但是不保证可靠，提升传输丢包的风险，再次影响了上网体验。 </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/bonelee/p/8059464.html">iodine免费上网 </a></p><p><a href="https://qiuri.org/806.html">透过DNS Tunnel绕过校园网认证系统实现免费上网 </a></p><p><a href="https://blog.csdn.net/qq_35422558/article/details/78018089">UDP绕过校园网，纯手工搭建 </a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>微信红包抓包和原理分析</title>
    <link href="/2018/06/12/%E5%BE%AE%E4%BF%A1%E7%BA%A2%E5%8C%85%E5%88%86%E6%9E%90/"/>
    <url>/2018/06/12/%E5%BE%AE%E4%BF%A1%E7%BA%A2%E5%8C%85%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="抓包方式"><a href="#抓包方式" class="headerlink" title="抓包方式"></a>抓包方式</h2><p>抓取微信红包数据包的工具是 <strong>Wireshark</strong>。Wireshark 的功能无需赘述了，最强大<br>的网络封包协议分析软件，没有之一。</p><p>另外还有手机型号系统和微信版本的问题，尝试过安卓系统手机和高版本的微信，只抓到两个微信红包数据包，难以进行分析，最后确定是在苹果系统和微信 6.5版本环境下才能抓到理想的数据包。</p><p>抓取微信红包数据包的方式就是笔记本电脑通过 WIFI 连接路由器上网，然后利用笔记本电脑网<br>卡的双频收发功能，连接 WIFI 的同时开启热点，手机WIFI 连接电脑开启的热点上网，最后在<br>Wireshark 中监听开启笔记本热点的网络连接即可。注意到 Wireshark 的抓包能力过强，抓到网络<br>协议的多层数据包，信息量巨大繁杂，因此要在过滤器工具栏中添加 http 协议的过滤规则，方便抓包。</p><h2 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h2><p>关于微信红包，一般是发红包，收红包和查看红包这三个流程。</p><p>发红包</p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809171534_388.png"></p><p>收红包</p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809171534_1000.png"></p><p>查看红包</p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809171534_284.png"></p><p>每个数据包的Info一栏中的英文字段能直观地反应出这个数据包的作用，而高版本的微信再次巩固了安全性，对Info一栏进行了加密，变成复杂的英文数字组合。也可以看出<strong>红包的发起请求方法为POST</strong>，参数不会被保存，比起GET请求方法更加安全。在这些数据包中任意选中一个查看详情，发现主要交互域名为<strong>short.weixin.qq.com</strong>，实验时服务器的IP地址为同一个，为<strong>182.254.92.141</strong>。</p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809171535_375.png"></p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809171535_292.png"></p><h2 id="红包延迟"><a href="#红包延迟" class="headerlink" title="红包延迟"></a>红包延迟</h2><p>抢红包延迟可以分为<strong>网络传输延迟</strong>和<strong>用户终端延迟</strong>两类。</p><p>从数据包角度来看，网络传输延迟主要发生在收到红包和打开红包这两个会话的延迟，如下图时间所示，客户端点击收到的红包消息时请求服务器，直至收到服务器返回红包状态的响应，来回延迟大约为0.11s。客户端点击拆开红包时请求服务器，直至收到服务器返回红包已打开和金额详情的响应，来回延迟则大约为0.53s。可见拆开红包时涉及了红包金额分配算法运行和支付管理入账等安全操作，需要更多的时间，<strong>服务器回复客户端显然要比单纯回复红包是否被抢光的前一个请求慢得多。</strong> </p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809171537_963.png"></p><p>用户终端延迟则包括了<strong>用户操作延迟</strong>和<strong>用户终端UI延迟</strong>。用户操作延迟无可厚非就是看人的反应和点击速度快慢了，因人而异。用户终端UI延迟集中在屏幕的物理响应和UI绘制延迟，据网上资料显示，苹果手机凭借着优异的系统性能和屏幕响应机制，抢红包比安卓手机更占优势。 </p><p><a href="https://weibo.com/p/1001603814272596583142">参考</a></p><p>至于供应商流量环境和WIFI环境下的抢红包速度对比，一般而言，<strong>WIFI抢红包速度胜于流量</strong>。距离方面，无线传输距离越长，则耗费时间越长。WIFI环境下用户终端到路由器距离比流量环境下到基站距离短，减少了延迟，信号到达路由器或者基站后就能以有线光缆光速传输。设计标准方面，流量环境下的最佳技术LTE的目标时延为100ms，而WIFI在轻载之下可以达到10ms左右，速度相差了五倍。另外一个考虑因素是网络运营商建设，WIFI连接的有线网络运营商电信的骨干网建设优于流量运营商移动联通。腾讯的微信服务器和相关的红包服务器更有可能搭建在中国电信骨干网上。</p><h2 id="红包规律"><a href="#红包规律" class="headerlink" title="红包规律"></a>红包规律</h2><p>研究<strong>红包领取顺序与领取到的红包金额之间的关系</strong>。发红包设计方案如下：红包总额为20元，红包总数为20个，一共进行十轮红包发放，然后统计数据并分析，表格数据如下，黄色高亮为该轮最佳手气。</p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809171538_785.png"></p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809171538_693.png"></p><p>从散点图看出，绝大多数红包的金额大小<strong>分布在所有样本均值1附近</strong>。横坐标越大，纵坐标增大的概率越高，也就是说，最佳手气大多分布在领取顺序靠后的编号中，<strong>领取红包顺序越后，越容易领到最佳手气红包</strong>。因此，对于喜欢拼最佳手气的冒险主义者来说，不必见到红包就马上下手，静候片刻再拆开，或许能愿望成真，不过需要承担过于迟拆开导致红包被领光的风险。 </p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809171538_730.png"></p><p>从均值折线图看出，均值随领取顺序变化波动较为剧烈，但总体还是<strong>围绕1上下波动变化的</strong>，也有可能是样本数据过少，个体偶然因素影响大，导致样本不够典型。因此，想利用上面“越后抢红包越容易拿最佳手气”这条规律的也不用沾沾自喜，白忙活一场抢红包大战下来，有可能抢到的跟别人的随缘抢也差不多，<strong>大家抢到的红包面额在概率上是大致均匀的</strong>。 </p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809171539_980.png"></p><p>从标准差折线图看出，横坐标增大，纵坐标也增大，就是说<strong>标准差随着领取时间的增大而增大</strong>。标准差能够描述数据的离散程度，说明数据的稳定性，标准差越大，数据则波动得越剧烈。这也印证了前面的说法，往后容易领到大金额红包，为了把均值稳定在1附近，也容易领到小金额红包，因而这种极端值过多的情况使得标准差和方差增大。</p><p>总结，研究得到的微信红包规律性如下：<strong>微信红包是公平的，多次抢红包，领取到的金额是差不多的。每次领取顺序越前，领到的红包金额越是稳定在均值，领取顺序越后，领到的红包越是可能手气最佳或者手气最差。</strong></p><h2 id="红包算法"><a href="#红包算法" class="headerlink" title="红包算法"></a>红包算法</h2><p>根据资料，可认为微信红包满足的是<strong>截尾正态分布</strong>，算法即在截尾正态分布中取随机数，并用其求和数除以总价值，获得修正因子，再用修正因子乘上所有的随机数，得到红包价值。这种分布意味着：减少抽取红包大小分布的方差，让更多的人抽取的红包在均值附近，同时仍给一小部分人抽取大红包的机会，总体来说增加了红包抽取人的积极性和游戏的公平性。</p><p>并且为了防止最后领红包的人领时红包余额为0，红包机制可能为：当发红包者&lt;准备红包&gt;的时候，程序自动依照截尾分布产生了相应大小，相应个数的红包，然后随机发给抽取红包的人。同样，这样的一个随机过程有助于增加游戏的公平性，也减少了红包抽取人投机操作（亦即譬如故意等钱包半空的时候再抽取）的动机。 也即是说，不论先拿后拿，期望都是相同的。</p><p><a href="http://coderroc.com/article/%E6%95%B0%E5%AD%A6%E5%92%8C%E7%AE%97%E6%B3%95/%E5%BE%AE%E4%BF%A1%E7%BA%A2%E5%8C%85%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95%E5%88%9D%E6%8E%A2.html">参考</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Github静态页面自定义域名开启Https</title>
    <link href="/2018/06/02/Github%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%BC%80%E5%90%AFHttps/"/>
    <url>/2018/06/02/Github%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%BC%80%E5%90%AFHttps/</url>
    
    <content type="html"><![CDATA[<p>最近Github静态页面支持了自定义域名开启Https，本站顺势也可以换上小绿锁。</p><p>官方支持页面为 <a href="https://help.github.com/articles/setting-up-an-apex-domain/">这个</a></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>Https加密，防劫持</li><li>基于Https的CDN优化，加快网站加载时间</li><li>提供了额外防护DDoS攻击的服务</li><li>强迫症福利，地址栏旁边的 ”不安全“变成小绿锁</li></ul><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>如官方文档所言更新DNS解析地址，我这里的域名服务是阿里云提供的，原本是</p><table><thead><tr><th>记录类型</th><th>主机记录</th><th>记录值</th></tr></thead><tbody><tr><td>A</td><td>@</td><td>151.101.229.147</td></tr><tr><td>CNAME</td><td>www</td><td>zwczwc.github.io</td></tr></tbody></table><p>对A类型记录修改增加为官方提供的四个IP地址，在官方文档里有。最终结果为</p><table><thead><tr><th>记录类型</th><th>主机记录</th><th>记录值</th></tr></thead><tbody><tr><td>A</td><td>@</td><td>185.199.111.153</td></tr><tr><td>A</td><td>@</td><td>185.199.110.153</td></tr><tr><td>A</td><td>@</td><td>185.199.109.153</td></tr><tr><td>A</td><td>@</td><td>185.199.108.153</td></tr><tr><td>CNAME</td><td>www</td><td>zwczwc.github.io</td></tr></tbody></table><p>确认保存解析设置即可，很快就会生效。</p><h3 id="Github设置"><a href="#Github设置" class="headerlink" title="Github设置"></a>Github设置</h3><p>打开Github静态页面所在的Repository，点入最右边的<code>Settings</code>，定位到<code>GitHub Pages</code>一栏，勾上<code>Enforce HTTPS</code>。</p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809050056_580.png"></p><p>发现无法勾上，旁边提示 <code>Not yet available for your site because the certificate has not finished being issued  </code>，这时可以把上面填在<code>Custom domain</code>里的自定义域名清空，保存，然后重新填上自定义域名，再保存。</p><p>然后发现<code>Enforce HTTPS</code>可以勾选了，果断勾选上，然后证书很快就会签发成功，现在可以打开自定义域名看看效果了。</p><p><img src="http://oy2kgwvj7.bkt.clouddn.com/201809050105_238.png"></p><p>大功告成！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
